plugins {
    id 'application'
    id 'java'
    id 'org.springframework.boot' version '3.0.5'
    id 'io.spring.dependency-management' version '1.1.0'
}

sourceCompatibility = '17'

//* =============== Java =============== *//
java { toolchain { languageVersion = JavaLanguageVersion.of(17) } }
compileJava { options.release.set(17) }

//* =============== Dependencies =============== *//
repositories { mavenCentral() }
dependencies {
    implementation 'nz.ac.waikato.cms.weka:weka-dev:3.9.6'
    implementation 'de.bwaldvogel:liblinear:2.44'
    implementation 'nz.ac.waikato.cms.weka:LibSVM:1.0.10'
    implementation files('./LibLINEAR.jar')

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.mysql:mysql-connector-j:8.0.33'


    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'com.google.guava:guava:31.1-jre'
}

test {
    useJUnitPlatform()
}

//* =============== Compiling =============== *//

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

application {
    mainClass = 'web.SentiStrengthApplication'
}


jar {
    manifest {
        attributes "Main-Class": "web.SentiStrengthApplication"
    }
    archiveBaseName.set(rootProject.name)
    archiveClassifier.set('')
    archiveVersion.set(version.toString())
}

bootDistZip {
    dependsOn(jar)
}

bootDistZip {
    dependsOn(jar)
}

bootStartScripts {
    dependsOn(jar)
}

startScripts {
    dependsOn(bootJar)
}

String jarName = "%s-%s.jar".formatted(rootProject.name, version.toString())
String jarPath = java.nio.file.Path.of('build/libs/', jarName)

tasks.register('release') {
    dependsOn(bootJar)
    inputs.dir './build/libs'
    doFirst {
        exec {
            commandLine 'bash', '-c', 'gh repo set-default'
            commandLine 'bash', '-c',
                    String.format('gh release create %s %s --generate-notes --latest --target master', version, jarPath)
        }
    }
}

tasks.register('docker-build') {
    dependsOn(bootJar)
    inputs.dir './build/libs'

    String curr = rootProject.name + ':' + version.toString()
    String latest = rootProject.name + ':latest'

    doFirst {
        exec {
            commandLine 'docker', 'build',
                    '-t', curr,
                    '--build-arg', 'JAR_NAME=' + jarName,
                    '.'
        }
        exec {
            commandLine 'docker', 'tag', curr, latest
        }
    }
}